import re
from decimal import Decimal, InvalidOperation
from datetime import datetime
from home.models import NavioBronze, NavioSilver


def limpar_volume(volume_str):
    if not volume_str:
        return None
    numeros = re.findall(r"[\d.,]+", volume_str)
    if not numeros:
        return None
    numero = numeros[0].replace(".", "").replace(",", ".")
    try:
        return Decimal(numero).quantize(Decimal("0.01"))
    except InvalidOperation:
        return None


def limpar_data(data_str):
    if not data_str:
        return None
    for fmt in ("%d/%m/%Y %H:%M", "%d/%m/%Y"):
        try:
            return datetime.strptime(data_str.strip(), fmt).date()
        except ValueError:
            continue
    return None


def limpar_sentido(sentido_str: str) -> str:
    if not sentido_str:
        return None

    sentido_str = sentido_str.strip().upper()
    if sentido_str in ["Imp", "DESC"]:
        return "Importação"
    elif sentido_str in ["Exp", "EMB"]:
        return "Exportação"
    elif sentido_str in ["Imp/Exp", "EMBDESC"]:
        return "Importação/Exportação"


def bronze_para_silver():
    for navio in NavioBronze.objects.all():
        NavioSilver.objects.create(
            data_chegada=limpar_data(navio.data_chegada),
            volume=limpar_volume(navio.volume),
            produto=navio.produto.strip() if navio.produto else None,
            sentido=limpar_sentido(navio.sentido),
            porto=navio.porto.strip() if navio.porto else None,
        )
